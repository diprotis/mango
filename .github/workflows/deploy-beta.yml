name: Deploy to Beta

on:
  push:
    branches:
      - beta
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  STAGE: beta

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      
      - name: Set up Python with uv
        run: |
          uv python install 3.10
          uv venv --python 3.10
      
      - name: Install dependencies
        run: |
          uv pip install -r infrastructure/requirements.txt
          uv pip install -r infrastructure/requirements-dev.txt
      
      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest tests/ -v

  deploy:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      
      - name: Set up Python with uv
        run: |
          uv python install 3.10
          uv venv --python 3.10
      
      - name: Install AWS CDK
        run: |
          npm install -g aws-cdk@latest
      
      - name: Install dependencies
        run: |
          uv pip install -r infrastructure/requirements.txt
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.BETA_DEPLOY_ROLE_ARN }}
          role-session-name: GitHubActions-Beta-Deploy
          aws-region: ${{ env.AWS_REGION }}
      
      - name: CDK Bootstrap (if needed)
        run: |
          source .venv/bin/activate
          cd infrastructure
          cdk bootstrap -c stage=${{ env.STAGE }} || true
      
      - name: CDK Deploy
        run: |
          source .venv/bin/activate
          cd infrastructure
          cdk deploy --all -c stage=${{ env.STAGE }} --require-approval never
      
      - name: Run integration tests
        run: |
          # Wait for services to stabilize
          sleep 30
          
          # Run integration tests against deployed infrastructure
          source .venv/bin/activate
          export STAGE=${{ env.STAGE }}
          pytest tests/integration/ -v -m beta
        continue-on-error: true  # Don't fail deployment on integration test failures initially
      
      - name: Output deployment info
        run: |
          echo "Deployment to Beta completed successfully!"
          echo "Stage: ${{ env.STAGE }}"
          echo "Region: ${{ env.AWS_REGION }}"
          echo "Time: $(date)"

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify deployment status
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ needs.deploy.result }}';
            const message = status === 'success' 
              ? '✅ Beta deployment successful!' 
              : '❌ Beta deployment failed!';
            
            // Add comment to PR if this was triggered by a PR merge
            if (context.payload.pull_request) {
              github.rest.issues.createComment({
                issue_number: context.payload.pull_request.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            }
