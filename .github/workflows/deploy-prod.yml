name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  STAGE: prod

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      
      - name: Set up Python with uv
        run: |
          uv python install 3.10
          uv venv --python 3.10
      
      - name: Install dependencies
        run: |
          uv pip install -r infrastructure/requirements.txt
          uv pip install -r infrastructure/requirements-dev.txt
      
      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest tests/ -v

  plan:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      
      - name: Set up Python with uv
        run: |
          uv python install 3.10
          uv venv --python 3.10
      
      - name: Install AWS CDK
        run: |
          npm install -g aws-cdk@latest
      
      - name: Install dependencies
        run: |
          uv pip install -r infrastructure/requirements.txt
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.PROD_DEPLOY_ROLE_ARN }}
          role-session-name: GitHubActions-Prod-Plan
          aws-region: ${{ env.AWS_REGION }}
      
      - name: CDK Diff
        run: |
          source .venv/bin/activate
          cd infrastructure
          cdk diff -c stage=${{ env.STAGE }}

  deploy:
    needs: plan
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://console.aws.amazon.com/cloudformation/home?region=${{ env.AWS_REGION }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      
      - name: Set up Python with uv
        run: |
          uv python install 3.10
          uv venv --python 3.10
      
      - name: Install AWS CDK
        run: |
          npm install -g aws-cdk@latest
      
      - name: Install dependencies
        run: |
          uv pip install -r infrastructure/requirements.txt
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.PROD_DEPLOY_ROLE_ARN }}
          role-session-name: GitHubActions-Prod-Deploy
          aws-region: ${{ env.AWS_REGION }}
      
      - name: CDK Bootstrap (if needed)
        run: |
          source .venv/bin/activate
          cd infrastructure
          cdk bootstrap -c stage=${{ env.STAGE }} || true
      
      - name: CDK Deploy
        run: |
          source .venv/bin/activate
          cd infrastructure
          cdk deploy --all -c stage=${{ env.STAGE }} --require-approval any-change
      
      - name: Create deployment tag
        uses: actions/github-script@v6
        with:
          script: |
            const date = new Date().toISOString().split('T')[0];
            const tagName = `prod-${date}-${context.sha.substring(0, 7)}`;
            
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${tagName}`,
              sha: context.sha
            });
            
            console.log(`Created deployment tag: ${tagName}`);
      
      - name: Run smoke tests
        run: |
          # Wait for services to stabilize
          sleep 30
          
          # Run minimal smoke tests against production
          source .venv/bin/activate
          export STAGE=${{ env.STAGE }}
          pytest tests/integration/ -v -m smoke
      
      - name: Output deployment info
        run: |
          echo "Deployment to Production completed successfully!"
          echo "Stage: ${{ env.STAGE }}"
          echo "Region: ${{ env.AWS_REGION }}"
          echo "Time: $(date)"
          echo "Commit: ${{ github.sha }}"

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify deployment status
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ needs.deploy.result }}';
            const message = status === 'success' 
              ? 'üöÄ Production deployment successful!' 
              : '‚ùå Production deployment failed!';
            
            // Create a deployment status
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 1,
              state: status === 'success' ? 'success' : 'failure',
              description: message,
              environment: 'production'
            });
